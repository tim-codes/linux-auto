- hosts: all
  become: yes # execute as sudo
  vars:
    packages:
      - curl
      - glances
      - debian-keyring
      - debian-archive-keyring
      - apt-transport-https
      - tldr
      - samba
      - transmission-cli
      - transmission-common
      - transmission-daemon
      - duf
      - ca-certificates
      - gnupg
      - lsb-release

  tasks:
    - name: Setup remote state dir
      command:
        cmd: mkdir -p /var/ansible/state
        creates: /var/ansible/state

    - name: Apt update & upgrade
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install apt packages
      apt:
        name: '{{ packages }}'
        state: present # install if missing else skip it

    - name: Install Docker - get keyrings
      shell:
        cmd: |
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        creates: /var/ansible/state/docker
      async: 3
      register: debug_docker_get_keyrings

    - name: Debug stdout [install_docker_get_keyrings]
      debug:
        msg: '{{ debug_docker_get_keyrings.stdout }}'

    - name: Debug stderr [install_docker_get_keyrings]
      debug:
        msg: '{{ debug_docker_get_keyrings.stderr }}'

    - name: Install Docker - apt update & install
      apt:
        update_cache: yes
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin

    - name: Install Microk8s (snap)
      snap:
        name: microk8s
        state: present
        classic: yes

    - name: Create Docker and Microk8s groups.
      group:
        name: '{{ item }}'
        state: present
      with_items:
        - docker
        - microk8s

    - name: Add user to Docker and Microk8s groups.
      user:
        name: '{{ lookup("ENV", "USER") }}'
        state: present
        groups:
          - docker
          - microk8s
        append: true

    - name: Enable Microk8s addons
      command: microk8s enable dashboard metrics-server

    - name: Start Microk8s
      command: microk8s start

    - name: Setup Firewall
      command: |
        ufw default deny incoming
        ufw default allow outgoing
        ufw allow ssh
        ufw allow http
        ufw allow https
        ufw allow samba
        ufw allow 32400
        ufw allow 51413
        ufw allow 81
        ufw enable
#       async: 10

    - name: Install Plex - get keyrings
      shell:
        cmd: |
          echo deb [signed-by=/usr/share/keyrings/plex.gpg] https://downloads.plex.tv/repo/deb public main | tee /etc/apt/sources.list.d/plexmediaserver.list
          wget -O- https://downloads.plex.tv/plex-keys/PlexSign.key | gpg --dearmor | tee /usr/share/keyrings/plex.gpg
          touch /var/ansible/state/plex-keyring
          mkdir -p /etc/systemd/system/plexmediaserver.service.d
        creates: /var/ansible/state/plex-keyring

    - name: Install Plex - apt update & install
      apt:
        update_cache: yes
        name: plexmediaserver

    - name: Install Plex - enable service
      command: systemctl enable plexmediaserver

    - name: Configure Plex
      copy:
        src: ../server/plex.conf
        dest: /etc/systemd/system/plexmediaserver.service.d/override.conf
        force: yes

    - name: Restart Plex
      command: systemctl daemon-reload

#    - name: Install caddy - get keyrings
#      shell:
#        cmd: |
#          curl -fsSL https://dl.cloudsmith.io/public/caddy/stable/gpg.key | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
#          curl -fsSL https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt | tee /etc/apt/sources.list.d/caddy-stable.list
#          touch /var/ansible/state/caddy-keyring
#        creates: /var/ansible/state/caddy-keyring
#       async: 15 # timeout after 15 seconds
#       register: debug_install_caddy

    - name: Install caddy - apt update & install
      apt:
        update_cache: yes
        name: caddy

#     - name: Debug stdout [install_caddy]
#       debug:
#         msg: '{{ debug_install_caddy.stdout }}'

#     - name: Debug stderr [install_caddy]
#       debug:
#         msg: '{{ debug_install_caddy.stderr }}'

#     - name: Add Caddyfile
#       copy:
#         src: ../server/Caddyfile
#         dest: /etc/caddy/Caddyfile
#         force: yes
#
#     - name: Reload Caddy service
#       shell: |
#         systemctl start caddy
#         systemctl reload caddy

    - name: Backup samba config
      command:
        cmd: cp /etc/samba/smb.conf /etc/samba/smb.conf_backup
        creates: /etc/samba/smb.conf_backup

    - name: Add custom samba config
      copy:
        src: ../server/smb.conf
        dest: /etc/samba/smb.conf
        force: yes

    - name: Add [tim] samba config
      copy:
        src: ../server/tim.smb.conf
        dest: /etc/samba/tim.smb.conf
        force: yes

    # todo: automate smbpasswd setup (must create samba user that matches system user)
    # smbpasswd -a tim

    - name: Enable samba daemon
      command: systemctl enable --now smbd

    - name: Reload samba daemon (for config changes)
      command: service smbd restart

    - name: Stop Transmission
      command: service transmission-daemon stop

    - name: Configure Transmission
      copy:
        src: ../server/transmission.json
        dest: /var/lib/transmission-daemon/info/settings.json
        force: yes

    - name: Increase memory buffer for Transmission
      shell:
        cmd: |
          echo "net.core.rmem_max = 4194304" >> /etc/sysctl.conf
          echo "net.core.wmem_max = 1048576" >> /etc/sysctl.conf
          sysctl -p
          sysctl --system
        creates: /var/ansible/state/sysctl_mem

    - name: Start Transmission
      command: service transmission-daemon start

#    - name: '[Group] app-data-writers'
#      group:
#        name: app-data-writers
#        state: present
#
#    - name: '[Group] nginx-proxy-manager -> app-data-writers'
#      user:
#        name: nginx-proxy-manager
#        state: present
#        groups:
#          - app-data-writers
#        append: true

    - name: Create app data directory
      command:
        cmd: mkdir -p /var/data
        creates: /var/data

    - name: Run nginx-proxy-manager container
      docker_container:
        name: nginx-proxy-manager
        image: jc21/nginx-proxy-manager
        restart: yes
        restart_policy: unless-stopped
        state: started
        published_ports:
          - 80:80
          - 81:81
          - 443:443
        volumes:
          - /var/data/nginx-proxy-manager/data:/data
          - /var/data/nginx-proxy-manager/letsencrypt:/etc/letsencrypt
